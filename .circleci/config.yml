version: 2.1
commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment on failure
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name server-stack-${CIRCLE_WORKFLOW_ID:0:5}

jobs:
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file server-stack.yml \
              --stack-name server-stack-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1
      - destroy_environment

  create_inventory:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "[all]" > ~/inventory
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory

  update_inventory_with_ec2_ip:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Update inventory file
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Project,Values=Gnosis" --output text >> ~/inventory

  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c2:a2:42:30:01:be:48:b6:cf:8c:f8:36:de:88:b0:ee"]
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i ~/inventory playbook.yml
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --no-cache aws-cli
      - run: apk add --update curl
      - run:
          name: Smoke test
          command: |
            URL="https://blog.udacity.com/"

            if curl -s --head ${URL}
            then
              return 0
            else
              return 1
            fi
      - destroy_environment
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name server-stack-${CIRCLE_WORKFLOW_ID:0:5} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:5}"
      - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - textfile.txt
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:5}"
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack.
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive
workflows:
  create-and-configure-instance:
    jobs:
      - create_inventory
      - create_infrastructure
      - update_inventory_with_ec2_ip:
          requires:
            - create_inventory
            - create_infrastructure
      - configure_infrastructure:
          requires:
            - update_inventory_with_ec2_ip
      - smoke_test:
          requires:
            - configure_infrastructure
      - create_and_deploy_front_end
      - promote_to_production:
          requires:
            - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production
